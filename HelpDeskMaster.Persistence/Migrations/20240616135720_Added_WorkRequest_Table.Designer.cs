// <auto-generated />
using System;
using HelpDeskMaster.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HelpDeskMaster.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240616135720_Added_WorkRequest_Table")]
    partial class Added_WorkRequest_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.EquipmentTypes.EquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<int>("TypeOfEquipment")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Equipments.ComputerEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ComputerId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UnassignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("ComputerEquipments");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Equipments.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CommissioningDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FactoryNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Model")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Equipments.EquipmentComputerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("ComputerId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameInNet")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("WarrantyCardDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WarrantyMonths")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId")
                        .IsUnique();

                    b.ToTable("EquipmentComputerInfos");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Users.UserEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UnassignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEquipments");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkCategories.WorkCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WorkCategories");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkDirections.WorkDirection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WorkDirections");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequestStageChanges.WorkRequestStageChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkRequestId");

                    b.ToTable("WorkRequestStageChange");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DesiredExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ExecuterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("FailureRevealedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkDirectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkCategoryId");

                    b.HasIndex("WorkDirectionId");

                    b.ToTable("WorkRequests");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequestEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkRequestId");

                    b.ToTable("WorkRequestEquipment");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequestPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkRequestId");

                    b.ToTable("WorkRequestPost");
                });

            modelBuilder.Entity("HelpDeskMaster.Persistence.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccuredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Equipments.ComputerEquipment", b =>
                {
                    b.HasOne("HelpDeskMaster.Domain.Entities.Equipments.Equipment", null)
                        .WithMany("ComputerEquipments")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelpDeskMaster.Domain.Entities.Equipments.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Equipments.Equipment", b =>
                {
                    b.HasOne("HelpDeskMaster.Domain.Entities.EquipmentTypes.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Equipments.EquipmentComputerInfo", b =>
                {
                    b.HasOne("HelpDeskMaster.Domain.Entities.Equipments.Equipment", null)
                        .WithOne("EquipmentComputerInfo")
                        .HasForeignKey("HelpDeskMaster.Domain.Entities.Equipments.EquipmentComputerInfo", "ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Users.User", b =>
                {
                    b.OwnsOne("HelpDeskMaster.Domain.Entities.Users.Login", "Login", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(254)
                                .HasColumnType("character varying(254)");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Login")
                        .IsRequired();
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Users.UserEquipment", b =>
                {
                    b.HasOne("HelpDeskMaster.Domain.Entities.Equipments.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelpDeskMaster.Domain.Entities.Users.User", null)
                        .WithMany("Equipments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequestStageChanges.WorkRequestStageChange", b =>
                {
                    b.HasOne("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequest", null)
                        .WithMany("RequestStageChanges")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequest", b =>
                {
                    b.HasOne("HelpDeskMaster.Domain.Entities.WorkCategories.WorkCategory", "WorkCategory")
                        .WithMany()
                        .HasForeignKey("WorkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelpDeskMaster.Domain.Entities.WorkDirections.WorkDirection", "WorkDirection")
                        .WithMany()
                        .HasForeignKey("WorkDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkCategory");

                    b.Navigation("WorkDirection");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequestEquipment", b =>
                {
                    b.HasOne("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequest", null)
                        .WithMany("Equipments")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequestPost", b =>
                {
                    b.HasOne("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequest", null)
                        .WithMany("WorkRequestPosts")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Equipments.Equipment", b =>
                {
                    b.Navigation("ComputerEquipments");

                    b.Navigation("EquipmentComputerInfo");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("HelpDeskMaster.Domain.Entities.WorkRequests.WorkRequest", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("RequestStageChanges");

                    b.Navigation("WorkRequestPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
